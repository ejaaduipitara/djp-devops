#common vars
namespace:  # kubernetes namespace where the ejp workloads are going to be deployed
kubeconfig_path: # Path to the kubeconfig file on Jenkins instance e.g. /var/lib/jenkins/secrets/k8s.yaml
imagepullsecrets: devregistrysecret
dockerhub: ghcr.io/sunbird-aiassistant


#kong vars
kong_pg_host: # Kong postgresql db hostname or ip address
kong_pg_database:  # database name of kong
kong_pg_user:  # Kong postgresql db username
kong_pg_password: # Kong postgresql db password

#nginx vars
domain: # name of the main domain to be used to access myjp e.g. myjp.example.org
dashboard_domain: # domain name to be used for dashboards e.g dashboards.myjp.example.org
core_vault_proxy_site_key: # private key of main domain
  
core_vault_proxy_site_crt:  # cert of main domain
  
dashboard_vault_proxy_site_key:  # private key of dashboard domain
  
dashboard_vault_proxy_site_crt:  # cert of dashboard domain
  

#storysakhi vars

ss_open_api_key: # Open AI Key used by Story Bot
ss_bhasini_endpoint_url: # Bhashini end point for language services (text to speech, speech to text and translations)
ss_bhasini_api_key: # API Key used to connect to Bhashini
ss_oci_endpoint_url: # The end point for the OCI Object storage which stores the response audio files.
ss_oci_region_name: # The region name of the OCI Object storage service
ss_oci_bucket_name: # The bucket name where the file are stored and public url created off
ss_oci_access_key: # The access key for the OCI storage
ss_oci_secret_key: # The secret key for the OCI storage
ss_openai_baseurl: # The Marco database endpoint. Marco keeps the index of knowledge which can be used for similarity search based on user questions
ss_openai_version:
ss_gpt_model:
ss_marqo_url: 


# activitysakhi vars

as_open_api_key: # Open AI Key used by Activity Bot
as_bhasini_endpoint_url: # Bhashini end point for language services (text to speech, speech to text and translations)
as_bhasini_api_key: # API Key used to connect to Bhashini
as_oci_endpoint_url: # The end point for the OCI Object storage which stores the response audio files.
as_oci_region_name: # The region name of the OCI Object storage service
as_oci_bucket_name: # The bucket name where the file are stored and public url created off
as_oci_access_key: # The access key for the OCI storage
as_oci_secret_key: # The secret key for the OCI storage
as_marqo_url: # The Marco database endpoint. Marco keeps the index of knowledge which can be used for similarity search based on user questions
as_openai_baseurl:
as_openai_version:
as_gpt_model:

# sakhi utility
su_open_api_key: # Open AI Key used by Activity Bot
su_bhasini_endpoint_url: # Bhashini end point for language services (text to speech, speech to text and translations)
su_bhasini_api_key: # API Key used to connect to Bhashini
su_oci_endpoint_url: # The end point for the OCI Object storage which stores the response audio files.
su_oci_region_name: # The region name of the OCI Object storage service
su_oci_bucket_name: # The bucket name where the file are stored and public url created off
su_oci_access_key: # The access key for the OCI storage
su_oci_secret_key: # The secret key for the OCI storage
su_openai_baseurl:
su_openai_version:
su_gpt_model:

# contentservice
content_postgres_db_username:  # content service postgresql db username
content_postgres_db_host: # postgresql db hostname or ip address
content_postgres_db_name: # postgresql database name of content service
content_postgres_db_password: # content service postgresql db password
content_postgres_ssl_enabled: # postgresql ssl enabled 
content_postgres_table_name: # content service postgresql table name
content_config_url: https://ax2cel5zyviy.objectstorage.ap-hyderabad-1.oci.customer-oci.com/n/ax2cel5zyviy/b/sbdjpbotspublic/o/config.json

# ivrs
ivrs_config_url:


# superset
postgres:
  adminUser: 
  adminPassword:
  db_host:
  db_port: "5432"
  superset:
    db_name: 
    db_username: 
    db_password:

redis_host:   #  redis-master.myjp.svc.cluster.local
redis_port: '6379'
superset_redis_db_index: '3'

# superset admin user details
adminUser:
  username:
  firstname:
  lastname: 
  email:
  password:


#telemetryservice
telemetry_pg_host: # postgresql db hostname or ip address
telemetry_pg_username: # telemetry service postgresql db username
telemetry_pg_password: # telemetry service postgresql db password
telemetry_pg_db: # postgresql database name of telemetry service
telemetry_pg_tablename: # telemetry service postgresql table name
telemetry_superset_admin_username: # Superset admin username
telemetry_superset_admin_password: # Superset admin password
telemetry_superset_host: # Superset host value

# whatsapp bot vars
wa_api_token:
wa_provider_number:
wa_provider_token:
wa_provider_appname:
wa_postgres_url: "postgres://USER:PASS@HOST:5432/DBNAME/sslmode=no-verify"
wa_app_env: "dev"
wa_app_name: ""

# unified telegram bot vars
ut_telegram_bot_name: # This will be the bot name that is created using BotFather
ut_telegram_bot_token: # This will be the bot token that is created using BotFather
ut_telegram_base_url: # This will be call back end point for Telegram Webhook
ut_redis_host: # This is the redis host name. Crosscheck the ut_redis_port (defaulted to 6379) and ut_redis_index (defaulted to 1 i.e; the DB number) in values.yaml

# monitoring vars
grafana:
  adminPassword: #grafana admin user password
  proxyenabled: true  # to expose grafana in nginx
  ## grafana.ini overides - to access from path /grafana
  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s/grafana/"
      serve_from_sub_path: true


